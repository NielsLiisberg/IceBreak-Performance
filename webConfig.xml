<?xml version="1.0" encoding="utf-8" ?>
<!--
	Note all xxx_ tags and attibutes a remarks
-->
<configuration>

	<!-- 
		Library list configuration for server. Puts the ICEBREAK core library:
			*END    As low as possible but before any other with noxDb, ILEastic or IceBreak ( this is the default)
			*FIRST  Top most position in the user part of the library list ( reflib must be blank)
			*LAST   Bottom in the user part library list ( reflib must be blank)
			*BEFORE Before the reference library
			*AFTER  After the reference library 
	-->
	<xxx_core>
		<libl libpos="*FIRST" reflib=""/>
	</xxx_core>

	<!--
		Run a series of commands - each line is a a separate system shell call, so line spanning is not allowed
	 -->
	<xxx_prestart> 
	  	say 'starting systest'
		call startup1
		mkdir '/www/systest/hastobethere'
 	  	say 'Ok'
	</xxx_prestart>

	<!-- 
		Any additional response headers required to make you application work. 
		These headers are added for both static and dynamic responses ( bothe the webserver and the application server provide these headers
	-->
	<xxx_headers>
		<var name="Access-Control-Allow-Origin"  		value="http://www.tempuri.org"/> 
		<var name="Access-Control-Allow-Credentials"  	value="true"/> 
		<var name="Access-Control-Expose-Headers"  		value="FooBar"/> 
	</xxx_headers> 


	<!-- to handle the session by API, please look at the SVCSESMAN examples -->
	<xxx_plugin>
		<map function="preRequest"  pgm="whitelist" lib="*LIBL" proc="whitelist"/>
	</xxx_plugin>


	<!--
		envvar is the ENVVAR for the application server job. If you utilize the RPG/JAVA instead of the IceBreak native java,
		you can set up the RPG/JAVA classpath and propertylist here. Don't confuse this by the java tag whic is only for IceBreak native JVM.
		Other envvar like PATH etc can be set here if you are using QSH, PASE or other unix like feature relying on environment vars.
	 -->
	<xxx_envvar>
		<var name="CLASSPATH" value="/udv/icebreak/java/IceBreakTools.jar"/>
		<var name="JAVA_HOME" value="/qopensys/QIBM/ProdData/OS400/PASE/bin"/>
		<var name="QIBM_RPG_JAVA_PROPERTIES" value="-Djava.awt.headless=true;-Dos400.stderr=file:stderr.txt;-Dos400.stdout=file:stdout.txt;"/>
	</xxx_envvar>

	<!--
		The session tag handles the behavior of the application server:

			"defaultPgm":
			Handles any fallthrough and errors like 404 and if the default document is set to *NONE:
			See /icebreak/admin/svcDefault example. The default is SVCDEFAULT in librarylist
			
			"exitPgm":
			The exitPgm API is called when a session is created and when it is terminated to let 
			you control custom housekeeping. See the ICEBREAK/QSAMPLE source file - ICESESSION for an example    

			"cookie"
			The cookie attribute is extra parameters you can append for the session cookie.

			"cookiePort"
			Append the portnumber where the server is listening to the cookiename, to avoid 
			session conflicts between serverinstances running on the same parttiont but different ports.
			

			"encrypt"
			The IceBreak session handle is based in a system wide unique timestamp. This is by default exposed, however 
			you can use a random hash value in the cookie by setting the "encrypt" to true.
	-->
	<session 
		disableSessionManager="true"
		xxx_defaultPgm="*LIBL/SVCDEFAULT"
		xxx_exitPgm="SVCUDV/ICESESSION" 
		xxx_cookie="Version=1; Path=/; Discard; secure; HttpOnly"
		xxx_cookie="Version=1; Path=/; Discard"
  		xxx_cookiePort="true"
		xxx_encrypt="true"
	/>


	<!--
		The response content is by default windows-1252 forbackward compatability. We suggest the you change it to UTF-8
		and use UTF-8 for both your source and templates. If you entire system is in UTF-8 you can even gain
		a performance boost by setting the "serveAlwaysUTF8" to true
	-->
	<content
		defaultCharset="utf-8"
		serveAlwaysUTF8="true"
		serveAlwaysChunks="true"
	/>

	<!--
		The response content will be compressed if the size is greater the threshold limit and if the client supports the algorithme.
		There is a small performance penalty in the compression algorithme, so don't set the threshold to low ( less than 4K)
		GZIP is the supported compression algorithme
	-->
	<contentEncoding
		type="GZIP"
		threshold="10000"
		dontCompress="gif,jpeg,jpg,png"
	/>

	<!--
		The upload tag describes a virtual path for the physical
		target for any HTTP upload multipart mime and the http PUT method.
	-->
	<xxx_upload allowPUT="true" putExitPgm="*LIBL/HANDLEPUT">
		<map alias="upload"   path="/upload"/> <!-- upload goes to the IFS root "upload" folder"  -->
		<map alias="dangerus" path="."/>       <!-- Never do this!! it uploads to the icebreak server root  -->
		<map alias="superbad" path="/"/>       <!-- Never never do this!! it allows the user to access the total IFS  -->
		<map alias="*" path="/tmp"/>           <!-- catch all - goes to /tmp -->
	</xxx_upload>

	<!--
       Routing is mapped regex patterns for applications and their corresponding program names.
       When "strict=true" only applications from this list is served
       The "routing" tag has higher precedence that "hives"
       The "pattern" is a regular expression match. The following match both maptest any place and and john in the beginning.
       The match is not case sensitive by default - but adding "casesensitive=true" changes that
       Note: No national characters are supported in the match.
       Note: Service programs are used if a "proc" is given. And run by the frontend web server. So the code has to be re-entrant
   -->

	<routing strict="false">
		<map pattern="router"          pgm="svcrouter" lib="*LIBL"/>
		<map pattern="^echo/echo"      pgm="echo"  lib="*LIBL" proc="echo" websocket="true"/>
	<!--	<map pattern="^.*"    pgm="default" lib="*LIBL"/> -->
	</routing>


	<!--
		Hives is virtual paths and maps to the associated application library and library list.
		Good practice is to keep a special char in the hive name (i.e. a dash) so it will not be
		confused by at physical path in the IFS. The hive path can point to any path
		on the IFS - also out of the server root path. This can be used to map to
		QNTC files on a Windows server or via a mounted NFS volume on a AIX, Linux,
		Mac, Win or NAS-disk for images, PDF resources etc.
    -->

	<xxx_hives>

		<xxx_map alias="on-the-net"
			path="/ifs-path"
			lib="*LIBL"
		/>

	</xxx_hives>


	<!--
		mime types maps the files suffix with the content type required in the HTTP protocol.
		Also any file suffix can trigger the the activation of the application server - either as a
		program call, a service program procedure call or a java method call.

		Keep this list optimized with only used mime types in you application  ( don't bloat this list !!)
		Used but unlisted mime-types will occur as warnings in the joblog

		Note: We can force the charset to "nothing" by setting the charset to blank. This can be used fot binary transfered files
	-->
	<mimeTypes>
		<map suffix="css"   contentType="text/css"                    />
		<map suffix="jar"   contentType="application/java" charset="" />
		<map suffix="js"    contentType="application/x-javascript"    />
		<map suffix="png"   contentType="image/png"        charset="" />
		<map suffix="gif"   contentType="image/gif"        charset="" />
		<map suffix="jpg"   contentType="image/jpeg"       charset="" />
		<map suffix="jpeg"  contentType="image/jpeg"       charset="" />
		<map suffix="html"  contentType="text/html"        charset="" />
		<map suffix="ico"   contentType="image/x-icon"     charset="" />
		<map suffix="live"  contentType="text/html" 	callType="PGM"    />
		<map suffix="aspx"  contentType="text/html" 	callType="PGM"    />
		<map suffix="svc"   contentType="text/html"  	callType="PGM"    />
		<map suffix="asmx"  contentType="text/html" 	callType="SRVPGM" />
		<map suffix="pgm"   contentType="text/html" 	callType="PGM"    />
		<map suffix="asp"   contentType="text/html" 	callType="PGM"    />
		<map suffix="pdf"   contentType="application/pdf"  charset="" />
		<map suffix="txt"   contentType="plain/text"  	charset="" />
	</mimeTypes>

	<!-- 
		Teamwork support is used with git / and DevOps tooling. It will produce a .teamwork folder in the
		the server root and also update the vsCode task list with build tools to alow users to compile in 
		an priveate space on the local dist and automatical upload had syncronize to 
		at private IFS location and library for the user.

		The Team token is the "ticket" clients need in their teamwork config to allow 
		updalod as syncronization. Any non-blank string is valid

	-->
	<xxx_teamwork 
		teamToken="aaaaaaaaaaaaaaaaaaaaaa=="
	/>


</configuration>


